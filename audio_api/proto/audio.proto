syntax = "proto3";

package audio;

service AudioService {
    // Subscribe to audio capture stream
    rpc SubscribeAudio(SubscribeRequest) returns (stream AudioChunk);
    
    // Play audio stream with stream ID
    rpc PlayAudio(stream PlayAudioRequest) returns (PlayResponse);
    
    // End audio stream
    rpc EndAudioStream(EndStreamRequest) returns (EndStreamResponse);
    
    // Abort playback by stream ID
    rpc AbortPlayback(AbortRequest) returns (AbortResponse);
}

// Request to subscribe to audio capture
message SubscribeRequest {
    // Empty for now - could add options later
}

// Audio format information
message AudioFormat {
    uint32 sample_rate = 1;      // Sample rate in Hz (e.g., 16000, 44100, 48000)
    uint32 channels = 2;         // Number of channels (1 for mono, 2 for stereo)
    SampleFormat sample_format = 3; // Sample format
}

// Sample format enumeration
enum SampleFormat {
    UNKNOWN = 0;
    I16 = 1;     // 16-bit signed integer
    I24 = 2;     // 24-bit signed integer
    I32 = 3;     // 32-bit signed integer
    F32 = 4;     // 32-bit float
    F64 = 5;     // 64-bit float
}

// Audio chunk with format metadata (first chunk) or just samples (subsequent chunks)
message AudioChunk {
    // Audio samples in various formats - choose the most appropriate for your data
    oneof samples {
        bytes float_samples = 1;     // 32-bit float samples (-1.0 to 1.0) as bytes
        bytes int16_samples = 2;     // 16-bit signed integer samples (little-endian)
        bytes int24_samples = 3;     // 24-bit signed integer samples (little-endian)
        bytes int32_samples = 4;     // 32-bit signed integer samples (little-endian)
        bytes float64_samples = 5;   // 64-bit float samples (little-endian)
    }
    
    uint64 timestamp_ms = 6;     // Timestamp in milliseconds since epoch
    
    // Format metadata - only present in the first chunk of a stream
    // Subsequent chunks will not have this field set
    AudioFormat format = 7;
}

// Play audio request with stream ID
message PlayAudioRequest {
    string stream_id = 1;        // Unique stream identifier
    oneof data {
        AudioChunk chunk = 2;    // Audio chunk data
        bool end_stream = 3;     // Signal end of stream
    }
}

// Response when playback is complete
message PlayResponse {
    bool success = 1;
    string message = 2;
}

// Request to abort playback by stream ID
message AbortRequest {
    string stream_id = 1;        // Stream ID to abort
}

// Request to end audio stream
message EndStreamRequest {
    string stream_id = 1;        // Stream ID to end
}

// Response to end stream request
message EndStreamResponse {
    bool success = 1;
    string message = 2;
    uint32 chunks_played = 3;    // Total chunks played
}

// Response to abort request
message AbortResponse {
    bool success = 1;
    string message = 2;
} 