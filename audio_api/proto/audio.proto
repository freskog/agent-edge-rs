syntax = "proto3";

package audio;

service AudioService {
    // Subscribe to audio capture stream
    rpc SubscribeAudio(SubscribeRequest) returns (stream AudioChunk);
    
    // Play audio stream with stream ID
    rpc PlayAudio(stream PlayAudioRequest) returns (PlayResponse);
    
    // End audio stream
    rpc EndAudioStream(EndStreamRequest) returns (EndStreamResponse);
    
    // Abort playback by stream ID
    rpc AbortPlayback(AbortRequest) returns (AbortResponse);
}

// Request to subscribe to audio capture
message SubscribeRequest {
    // Empty for now - could add options later
}

// Audio chunk with exactly 1280 f32 samples at 16kHz mono
// Format: 16kHz sample rate, 1 channel (mono), 1280 samples per chunk (80ms)
message AudioChunk {
    repeated float samples = 1;  // Exactly 1280 samples
    uint64 timestamp_ms = 2;     // Timestamp in milliseconds since epoch
}

// Play audio request with stream ID
message PlayAudioRequest {
    string stream_id = 1;        // Unique stream identifier
    oneof data {
        AudioChunk chunk = 2;    // Audio chunk data
        bool end_stream = 3;     // Signal end of stream
    }
}

// Response when playback is complete
message PlayResponse {
    bool success = 1;
    string message = 2;
}

// Request to abort playback by stream ID
message AbortRequest {
    string stream_id = 1;        // Stream ID to abort
}

// Request to end audio stream
message EndStreamRequest {
    string stream_id = 1;        // Stream ID to end
}

// Response to end stream request
message EndStreamResponse {
    bool success = 1;
    string message = 2;
    uint32 chunks_played = 3;    // Total chunks played
}

// Response to abort request
message AbortResponse {
    bool success = 1;
    string message = 2;
} 