syntax = "proto3";

package audio;

service AudioService {
    // Subscribe to audio capture stream
    rpc SubscribeAudio(SubscribeRequest) returns (stream AudioChunk);
    
    // Play audio stream with stream ID
    rpc PlayAudio(stream PlayAudioRequest) returns (PlayResponse);
    
    // End audio stream
    rpc EndAudioStream(EndStreamRequest) returns (EndStreamResponse);
    
    // Abort playback by stream ID
    rpc AbortPlayback(AbortRequest) returns (AbortResponse);
}

// Request to subscribe to audio capture
message SubscribeRequest {
    // Empty for now - could add options later
}

// Audio chunk with s16le samples (16-bit signed little-endian, mono, 16kHz)
// This is the standard format for STT/TTS/Wakeword processing
message AudioChunk {
    bytes samples = 1;           // Always s16le format (16-bit signed little-endian)
    uint64 timestamp_ms = 2;     // Timestamp in milliseconds since epoch
}

// Play audio request with stream ID
message PlayAudioRequest {
    string stream_id = 1;        // Unique stream identifier
    oneof data {
        AudioChunk chunk = 2;    // Audio chunk data (always s16le format)
        bool end_stream = 3;     // Signal end of stream
    }
}

// Response when playback is complete
message PlayResponse {
    bool success = 1;
    string message = 2;
}

// Request to abort playback by stream ID
message AbortRequest {
    string stream_id = 1;        // Stream ID to abort
}

// Request to end audio stream
message EndStreamRequest {
    string stream_id = 1;        // Stream ID to end
}

// Response to end stream request
message EndStreamResponse {
    bool success = 1;
    string message = 2;
    uint32 chunks_played = 3;    // Total chunks played
}

// Response to abort request
message AbortResponse {
    bool success = 1;
    string message = 2;
} 